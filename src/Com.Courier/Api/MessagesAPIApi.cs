/*
 * Courier API Reference
 *
 * The Courier REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@courier.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Com.Courier.Client;
using Com.Courier.Model;

namespace Com.Courier.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagesAPIApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// GET /messages/{message_id}
        /// </summary>
        /// <remarks>
        /// Fetch the status of a message you&#39;ve previously sent.
        /// </remarks>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <returns>Object</returns>
        Object GetMessageById(string messageId);

        /// <summary>
        /// GET /messages/{message_id}
        /// </summary>
        /// <remarks>
        /// Fetch the status of a message you&#39;ve previously sent.
        /// </remarks>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetMessageByIdWithHttpInfo(string messageId);
        /// <summary>
        /// GET /messages/{message_id}/history
        /// </summary>
        /// <remarks>
        /// Fetch the array of events of a message you&#39;ve previously sent.
        /// </remarks>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <param name="type">A supported Message History type that will filter the events returned. (optional)</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetMessageHistoryById(string messageId, string type = default(string));

        /// <summary>
        /// GET /messages/{message_id}/history
        /// </summary>
        /// <remarks>
        /// Fetch the array of events of a message you&#39;ve previously sent.
        /// </remarks>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <param name="type">A supported Message History type that will filter the events returned. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetMessageHistoryByIdWithHttpInfo(string messageId, string type = default(string));
        /// <summary>
        /// GET /messages/{message_id}/output
        /// </summary>
        /// <remarks>
        /// Fetch the output of rendered events of a message you&#39;ve previously sent.
        /// </remarks>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GetMessageOutput(string messageId);

        /// <summary>
        /// GET /messages/{message_id}/output
        /// </summary>
        /// <remarks>
        /// Fetch the output of rendered events of a message you&#39;ve previously sent.
        /// </remarks>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> GetMessageOutputWithHttpInfo(string messageId);
        /// <summary>
        /// GET /messages
        /// </summary>
        /// <remarks>
        /// Fetch the statuses of messages you&#39;ve previously sent.
        /// </remarks>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">A unique identifier that allows for fetching the next set of message statuses. (optional)</param>
        /// <param name="_event">A unique identifier representing the event that was used to send the event. (optional)</param>
        /// <param name="list">A unique identifier representing the list the message was sent to. (optional)</param>
        /// <param name="messageId">A unique identifier representing the &#x60;message_id&#x60; returned from either /send or /send/list. (optional)</param>
        /// <param name="notification">A unique identifier representing the notification that was used to send the event. (optional)</param>
        /// <param name="recipient">A unique identifier representing the recipient associated with the requested profile. (optional)</param>
        /// <param name="status">An indicator of the current status of the message. Multiple status values can be passed in. (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetMessages(string cursor = default(string), string _event = default(string), string list = default(string), string messageId = default(string), string notification = default(string), string recipient = default(string), string status = default(string));

        /// <summary>
        /// GET /messages
        /// </summary>
        /// <remarks>
        /// Fetch the statuses of messages you&#39;ve previously sent.
        /// </remarks>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">A unique identifier that allows for fetching the next set of message statuses. (optional)</param>
        /// <param name="_event">A unique identifier representing the event that was used to send the event. (optional)</param>
        /// <param name="list">A unique identifier representing the list the message was sent to. (optional)</param>
        /// <param name="messageId">A unique identifier representing the &#x60;message_id&#x60; returned from either /send or /send/list. (optional)</param>
        /// <param name="notification">A unique identifier representing the notification that was used to send the event. (optional)</param>
        /// <param name="recipient">A unique identifier representing the recipient associated with the requested profile. (optional)</param>
        /// <param name="status">An indicator of the current status of the message. Multiple status values can be passed in. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetMessagesWithHttpInfo(string cursor = default(string), string _event = default(string), string list = default(string), string messageId = default(string), string notification = default(string), string recipient = default(string), string status = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagesAPIApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// GET /messages/{message_id}
        /// </summary>
        /// <remarks>
        /// Fetch the status of a message you&#39;ve previously sent.
        /// </remarks>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetMessageByIdAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET /messages/{message_id}
        /// </summary>
        /// <remarks>
        /// Fetch the status of a message you&#39;ve previously sent.
        /// </remarks>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetMessageByIdWithHttpInfoAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET /messages/{message_id}/history
        /// </summary>
        /// <remarks>
        /// Fetch the array of events of a message you&#39;ve previously sent.
        /// </remarks>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <param name="type">A supported Message History type that will filter the events returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetMessageHistoryByIdAsync(string messageId, string type = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET /messages/{message_id}/history
        /// </summary>
        /// <remarks>
        /// Fetch the array of events of a message you&#39;ve previously sent.
        /// </remarks>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <param name="type">A supported Message History type that will filter the events returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetMessageHistoryByIdWithHttpInfoAsync(string messageId, string type = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET /messages/{message_id}/output
        /// </summary>
        /// <remarks>
        /// Fetch the output of rendered events of a message you&#39;ve previously sent.
        /// </remarks>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> GetMessageOutputAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET /messages/{message_id}/output
        /// </summary>
        /// <remarks>
        /// Fetch the output of rendered events of a message you&#39;ve previously sent.
        /// </remarks>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetMessageOutputWithHttpInfoAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET /messages
        /// </summary>
        /// <remarks>
        /// Fetch the statuses of messages you&#39;ve previously sent.
        /// </remarks>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">A unique identifier that allows for fetching the next set of message statuses. (optional)</param>
        /// <param name="_event">A unique identifier representing the event that was used to send the event. (optional)</param>
        /// <param name="list">A unique identifier representing the list the message was sent to. (optional)</param>
        /// <param name="messageId">A unique identifier representing the &#x60;message_id&#x60; returned from either /send or /send/list. (optional)</param>
        /// <param name="notification">A unique identifier representing the notification that was used to send the event. (optional)</param>
        /// <param name="recipient">A unique identifier representing the recipient associated with the requested profile. (optional)</param>
        /// <param name="status">An indicator of the current status of the message. Multiple status values can be passed in. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetMessagesAsync(string cursor = default(string), string _event = default(string), string list = default(string), string messageId = default(string), string notification = default(string), string recipient = default(string), string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET /messages
        /// </summary>
        /// <remarks>
        /// Fetch the statuses of messages you&#39;ve previously sent.
        /// </remarks>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">A unique identifier that allows for fetching the next set of message statuses. (optional)</param>
        /// <param name="_event">A unique identifier representing the event that was used to send the event. (optional)</param>
        /// <param name="list">A unique identifier representing the list the message was sent to. (optional)</param>
        /// <param name="messageId">A unique identifier representing the &#x60;message_id&#x60; returned from either /send or /send/list. (optional)</param>
        /// <param name="notification">A unique identifier representing the notification that was used to send the event. (optional)</param>
        /// <param name="recipient">A unique identifier representing the recipient associated with the requested profile. (optional)</param>
        /// <param name="status">An indicator of the current status of the message. Multiple status values can be passed in. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetMessagesWithHttpInfoAsync(string cursor = default(string), string _event = default(string), string list = default(string), string messageId = default(string), string notification = default(string), string recipient = default(string), string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagesAPIApi : IMessagesAPIApiSync, IMessagesAPIApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessagesAPIApi : IMessagesAPIApi
    {
        private Com.Courier.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessagesAPIApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessagesAPIApi(string basePath)
        {
            this.Configuration = Com.Courier.Client.Configuration.MergeConfigurations(
                Com.Courier.Client.GlobalConfiguration.Instance,
                new Com.Courier.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Com.Courier.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Courier.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Com.Courier.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesAPIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MessagesAPIApi(Com.Courier.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Com.Courier.Client.Configuration.MergeConfigurations(
                Com.Courier.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Com.Courier.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Com.Courier.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Com.Courier.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesAPIApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MessagesAPIApi(Com.Courier.Client.ISynchronousClient client, Com.Courier.Client.IAsynchronousClient asyncClient, Com.Courier.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Com.Courier.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Com.Courier.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Com.Courier.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Courier.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Courier.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// GET /messages/{message_id} Fetch the status of a message you&#39;ve previously sent.
        /// </summary>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <returns>Object</returns>
        public Object GetMessageById(string messageId)
        {
            Com.Courier.Client.ApiResponse<Object> localVarResponse = GetMessageByIdWithHttpInfo(messageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET /messages/{message_id} Fetch the status of a message you&#39;ve previously sent.
        /// </summary>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <returns>ApiResponse of Object</returns>
        public Com.Courier.Client.ApiResponse<Object> GetMessageByIdWithHttpInfo(string messageId)
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new Com.Courier.Client.ApiException(400, "Missing required parameter 'messageId' when calling MessagesAPIApi->GetMessageById");

            Com.Courier.Client.RequestOptions localVarRequestOptions = new Com.Courier.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Courier.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Courier.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("message_id", Com.Courier.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Courier.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/messages/{message_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET /messages/{message_id} Fetch the status of a message you&#39;ve previously sent.
        /// </summary>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetMessageByIdAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Courier.Client.ApiResponse<Object> localVarResponse = await GetMessageByIdWithHttpInfoAsync(messageId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET /messages/{message_id} Fetch the status of a message you&#39;ve previously sent.
        /// </summary>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Com.Courier.Client.ApiResponse<Object>> GetMessageByIdWithHttpInfoAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new Com.Courier.Client.ApiException(400, "Missing required parameter 'messageId' when calling MessagesAPIApi->GetMessageById");


            Com.Courier.Client.RequestOptions localVarRequestOptions = new Com.Courier.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Com.Courier.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Courier.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("message_id", Com.Courier.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Courier.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/messages/{message_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET /messages/{message_id}/history Fetch the array of events of a message you&#39;ve previously sent.
        /// </summary>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <param name="type">A supported Message History type that will filter the events returned. (optional)</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetMessageHistoryById(string messageId, string type = default(string))
        {
            Com.Courier.Client.ApiResponse<InlineResponse2002> localVarResponse = GetMessageHistoryByIdWithHttpInfo(messageId, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET /messages/{message_id}/history Fetch the array of events of a message you&#39;ve previously sent.
        /// </summary>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <param name="type">A supported Message History type that will filter the events returned. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public Com.Courier.Client.ApiResponse<InlineResponse2002> GetMessageHistoryByIdWithHttpInfo(string messageId, string type = default(string))
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new Com.Courier.Client.ApiException(400, "Missing required parameter 'messageId' when calling MessagesAPIApi->GetMessageHistoryById");

            Com.Courier.Client.RequestOptions localVarRequestOptions = new Com.Courier.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Courier.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Courier.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("message_id", Com.Courier.Client.ClientUtils.ParameterToString(messageId)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Courier.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Courier.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2002>("/messages/{message_id}/history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageHistoryById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET /messages/{message_id}/history Fetch the array of events of a message you&#39;ve previously sent.
        /// </summary>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <param name="type">A supported Message History type that will filter the events returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> GetMessageHistoryByIdAsync(string messageId, string type = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Courier.Client.ApiResponse<InlineResponse2002> localVarResponse = await GetMessageHistoryByIdWithHttpInfoAsync(messageId, type, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET /messages/{message_id}/history Fetch the array of events of a message you&#39;ve previously sent.
        /// </summary>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <param name="type">A supported Message History type that will filter the events returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<Com.Courier.Client.ApiResponse<InlineResponse2002>> GetMessageHistoryByIdWithHttpInfoAsync(string messageId, string type = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new Com.Courier.Client.ApiException(400, "Missing required parameter 'messageId' when calling MessagesAPIApi->GetMessageHistoryById");


            Com.Courier.Client.RequestOptions localVarRequestOptions = new Com.Courier.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Com.Courier.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Courier.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("message_id", Com.Courier.Client.ClientUtils.ParameterToString(messageId)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Courier.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Courier.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2002>("/messages/{message_id}/history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageHistoryById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET /messages/{message_id}/output Fetch the output of rendered events of a message you&#39;ve previously sent.
        /// </summary>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 GetMessageOutput(string messageId)
        {
            Com.Courier.Client.ApiResponse<InlineResponse2003> localVarResponse = GetMessageOutputWithHttpInfo(messageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET /messages/{message_id}/output Fetch the output of rendered events of a message you&#39;ve previously sent.
        /// </summary>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public Com.Courier.Client.ApiResponse<InlineResponse2003> GetMessageOutputWithHttpInfo(string messageId)
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new Com.Courier.Client.ApiException(400, "Missing required parameter 'messageId' when calling MessagesAPIApi->GetMessageOutput");

            Com.Courier.Client.RequestOptions localVarRequestOptions = new Com.Courier.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Courier.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Courier.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("message_id", Com.Courier.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Courier.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2003>("/messages/{message_id}/output", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageOutput", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET /messages/{message_id}/output Fetch the output of rendered events of a message you&#39;ve previously sent.
        /// </summary>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> GetMessageOutputAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Courier.Client.ApiResponse<InlineResponse2003> localVarResponse = await GetMessageOutputWithHttpInfoAsync(messageId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET /messages/{message_id}/output Fetch the output of rendered events of a message you&#39;ve previously sent.
        /// </summary>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">A unique identifier associated with the message you wish to retrieve (results from a send).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<Com.Courier.Client.ApiResponse<InlineResponse2003>> GetMessageOutputWithHttpInfoAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new Com.Courier.Client.ApiException(400, "Missing required parameter 'messageId' when calling MessagesAPIApi->GetMessageOutput");


            Com.Courier.Client.RequestOptions localVarRequestOptions = new Com.Courier.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Com.Courier.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Courier.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("message_id", Com.Courier.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Courier.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2003>("/messages/{message_id}/output", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageOutput", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET /messages Fetch the statuses of messages you&#39;ve previously sent.
        /// </summary>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">A unique identifier that allows for fetching the next set of message statuses. (optional)</param>
        /// <param name="_event">A unique identifier representing the event that was used to send the event. (optional)</param>
        /// <param name="list">A unique identifier representing the list the message was sent to. (optional)</param>
        /// <param name="messageId">A unique identifier representing the &#x60;message_id&#x60; returned from either /send or /send/list. (optional)</param>
        /// <param name="notification">A unique identifier representing the notification that was used to send the event. (optional)</param>
        /// <param name="recipient">A unique identifier representing the recipient associated with the requested profile. (optional)</param>
        /// <param name="status">An indicator of the current status of the message. Multiple status values can be passed in. (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 GetMessages(string cursor = default(string), string _event = default(string), string list = default(string), string messageId = default(string), string notification = default(string), string recipient = default(string), string status = default(string))
        {
            Com.Courier.Client.ApiResponse<InlineResponse2001> localVarResponse = GetMessagesWithHttpInfo(cursor, _event, list, messageId, notification, recipient, status);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET /messages Fetch the statuses of messages you&#39;ve previously sent.
        /// </summary>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">A unique identifier that allows for fetching the next set of message statuses. (optional)</param>
        /// <param name="_event">A unique identifier representing the event that was used to send the event. (optional)</param>
        /// <param name="list">A unique identifier representing the list the message was sent to. (optional)</param>
        /// <param name="messageId">A unique identifier representing the &#x60;message_id&#x60; returned from either /send or /send/list. (optional)</param>
        /// <param name="notification">A unique identifier representing the notification that was used to send the event. (optional)</param>
        /// <param name="recipient">A unique identifier representing the recipient associated with the requested profile. (optional)</param>
        /// <param name="status">An indicator of the current status of the message. Multiple status values can be passed in. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public Com.Courier.Client.ApiResponse<InlineResponse2001> GetMessagesWithHttpInfo(string cursor = default(string), string _event = default(string), string list = default(string), string messageId = default(string), string notification = default(string), string recipient = default(string), string status = default(string))
        {
            Com.Courier.Client.RequestOptions localVarRequestOptions = new Com.Courier.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Com.Courier.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Courier.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Courier.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (_event != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Courier.Client.ClientUtils.ParameterToMultiMap("", "event", _event));
            }
            if (list != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Courier.Client.ClientUtils.ParameterToMultiMap("", "list", list));
            }
            if (messageId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Courier.Client.ClientUtils.ParameterToMultiMap("", "messageId", messageId));
            }
            if (notification != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Courier.Client.ClientUtils.ParameterToMultiMap("", "notification", notification));
            }
            if (recipient != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Courier.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Courier.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Courier.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2001>("/messages", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET /messages Fetch the statuses of messages you&#39;ve previously sent.
        /// </summary>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">A unique identifier that allows for fetching the next set of message statuses. (optional)</param>
        /// <param name="_event">A unique identifier representing the event that was used to send the event. (optional)</param>
        /// <param name="list">A unique identifier representing the list the message was sent to. (optional)</param>
        /// <param name="messageId">A unique identifier representing the &#x60;message_id&#x60; returned from either /send or /send/list. (optional)</param>
        /// <param name="notification">A unique identifier representing the notification that was used to send the event. (optional)</param>
        /// <param name="recipient">A unique identifier representing the recipient associated with the requested profile. (optional)</param>
        /// <param name="status">An indicator of the current status of the message. Multiple status values can be passed in. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> GetMessagesAsync(string cursor = default(string), string _event = default(string), string list = default(string), string messageId = default(string), string notification = default(string), string recipient = default(string), string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Com.Courier.Client.ApiResponse<InlineResponse2001> localVarResponse = await GetMessagesWithHttpInfoAsync(cursor, _event, list, messageId, notification, recipient, status, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET /messages Fetch the statuses of messages you&#39;ve previously sent.
        /// </summary>
        /// <exception cref="Com.Courier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cursor">A unique identifier that allows for fetching the next set of message statuses. (optional)</param>
        /// <param name="_event">A unique identifier representing the event that was used to send the event. (optional)</param>
        /// <param name="list">A unique identifier representing the list the message was sent to. (optional)</param>
        /// <param name="messageId">A unique identifier representing the &#x60;message_id&#x60; returned from either /send or /send/list. (optional)</param>
        /// <param name="notification">A unique identifier representing the notification that was used to send the event. (optional)</param>
        /// <param name="recipient">A unique identifier representing the recipient associated with the requested profile. (optional)</param>
        /// <param name="status">An indicator of the current status of the message. Multiple status values can be passed in. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<Com.Courier.Client.ApiResponse<InlineResponse2001>> GetMessagesWithHttpInfoAsync(string cursor = default(string), string _event = default(string), string list = default(string), string messageId = default(string), string notification = default(string), string recipient = default(string), string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Com.Courier.Client.RequestOptions localVarRequestOptions = new Com.Courier.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Com.Courier.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Com.Courier.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Courier.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (_event != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Courier.Client.ClientUtils.ParameterToMultiMap("", "event", _event));
            }
            if (list != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Courier.Client.ClientUtils.ParameterToMultiMap("", "list", list));
            }
            if (messageId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Courier.Client.ClientUtils.ParameterToMultiMap("", "messageId", messageId));
            }
            if (notification != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Courier.Client.ClientUtils.ParameterToMultiMap("", "notification", notification));
            }
            if (recipient != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Courier.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Com.Courier.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Com.Courier.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2001>("/messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
