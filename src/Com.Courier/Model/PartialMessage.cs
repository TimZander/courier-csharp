/*
 * Courier API Reference
 *
 * The Courier REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@courier.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Courier.Client.OpenAPIDateConverter;

namespace Com.Courier.Model
{
    /// <summary>
    /// PartialMessage
    /// </summary>
    [DataContract(Name = "PartialMessage")]
    public partial class PartialMessage : IEquatable<PartialMessage>, IValidatableObject
    {
        /// <summary>
        /// Defines Reason
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonEnum
        {
            /// <summary>
            /// Enum FILTERED for value: FILTERED
            /// </summary>
            [EnumMember(Value = "FILTERED")]
            FILTERED = 1,

            /// <summary>
            /// Enum NOCHANNELS for value: NO_CHANNELS
            /// </summary>
            [EnumMember(Value = "NO_CHANNELS")]
            NOCHANNELS = 2,

            /// <summary>
            /// Enum NOPROVIDERS for value: NO_PROVIDERS
            /// </summary>
            [EnumMember(Value = "NO_PROVIDERS")]
            NOPROVIDERS = 3,

            /// <summary>
            /// Enum OPTINREQUIRED for value: OPT_IN_REQUIRED
            /// </summary>
            [EnumMember(Value = "OPT_IN_REQUIRED")]
            OPTINREQUIRED = 4,

            /// <summary>
            /// Enum PROVIDERERROR for value: PROVIDER_ERROR
            /// </summary>
            [EnumMember(Value = "PROVIDER_ERROR")]
            PROVIDERERROR = 5,

            /// <summary>
            /// Enum UNPUBLISHED for value: UNPUBLISHED
            /// </summary>
            [EnumMember(Value = "UNPUBLISHED")]
            UNPUBLISHED = 6,

            /// <summary>
            /// Enum UNSUBSCRIBED for value: UNSUBSCRIBED
            /// </summary>
            [EnumMember(Value = "UNSUBSCRIBED")]
            UNSUBSCRIBED = 7

        }


        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public ReasonEnum? Reason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PartialMessage" /> class.
        /// </summary>
        /// <param name="id">A unique identifier associated with the message you wish to retrieve (results from a send). (default to &quot;1-5e2b2615-05efbb3acab9172f88dd3f6f&quot;).</param>
        /// <param name="status">status.</param>
        /// <param name="enqueued">A UTC timestamp at which Courier received the message request. This is stored as a millisecond representation of the Unix epoch (the time passed since January 1, 1970)..</param>
        /// <param name="sent">A UTC timestamp at which Courier passed the message to the Integration provider. This is stored as a millisecond representation of the Unix epoch (the time passed since January 1, 1970)..</param>
        /// <param name="delivered">A UTC timestamp at which the Integration provider delivered the message. This is stored as a millisecond representation of the Unix epoch (the time passed since January 1, 1970)..</param>
        /// <param name="opened">A UTC timestamp at which the recipient opened a message for the first time. This is stored as a millisecond representation of the Unix epoch (the time passed since January 1, 1970)..</param>
        /// <param name="clicked">A UTC timestamp at which the recipient clicked on a tracked link for the first time. This is stored as a millisecond representation of the Unix epoch (the time passed since January 1, 1970)..</param>
        /// <param name="recipient">A unique identifier associated with the recipient of the delivered message. (default to &quot;CC607F6E84A34305AE98B72C&quot;).</param>
        /// <param name="_event">A unique identifier associated with the event of the delivered message. (default to &quot;my-event&quot;).</param>
        /// <param name="notification">A unique identifier associated with the notification of the delivered message. (default to &quot;TAFGNB3GNQ4MZVHW4WV4R8Q8ZVN4&quot;).</param>
        /// <param name="error">A message describing the error that occurred. (default to &quot;400 Bad Request&quot;).</param>
        /// <param name="reason">reason.</param>
        public PartialMessage(string id = "1-5e2b2615-05efbb3acab9172f88dd3f6f", string status = default(string), int enqueued = default(int), int sent = default(int), int delivered = default(int), int opened = default(int), int clicked = default(int), string recipient = "CC607F6E84A34305AE98B72C", string _event = "my-event", string notification = "TAFGNB3GNQ4MZVHW4WV4R8Q8ZVN4", string error = "400 Bad Request", ReasonEnum? reason = default(ReasonEnum?))
        {
            // use default value if no "id" provided
            this.Id = id ?? "1-5e2b2615-05efbb3acab9172f88dd3f6f";
            this.Status = status;
            this.Enqueued = enqueued;
            this.Sent = sent;
            this.Delivered = delivered;
            this.Opened = opened;
            this.Clicked = clicked;
            // use default value if no "recipient" provided
            this.Recipient = recipient ?? "CC607F6E84A34305AE98B72C";
            // use default value if no "_event" provided
            this.Event = _event ?? "my-event";
            // use default value if no "notification" provided
            this.Notification = notification ?? "TAFGNB3GNQ4MZVHW4WV4R8Q8ZVN4";
            // use default value if no "error" provided
            this.Error = error ?? "400 Bad Request";
            this.Reason = reason;
        }

        /// <summary>
        /// A unique identifier associated with the message you wish to retrieve (results from a send).
        /// </summary>
        /// <value>A unique identifier associated with the message you wish to retrieve (results from a send).</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// A UTC timestamp at which Courier received the message request. This is stored as a millisecond representation of the Unix epoch (the time passed since January 1, 1970).
        /// </summary>
        /// <value>A UTC timestamp at which Courier received the message request. This is stored as a millisecond representation of the Unix epoch (the time passed since January 1, 1970).</value>
        [DataMember(Name = "enqueued", EmitDefaultValue = false)]
        public int Enqueued { get; set; }

        /// <summary>
        /// A UTC timestamp at which Courier passed the message to the Integration provider. This is stored as a millisecond representation of the Unix epoch (the time passed since January 1, 1970).
        /// </summary>
        /// <value>A UTC timestamp at which Courier passed the message to the Integration provider. This is stored as a millisecond representation of the Unix epoch (the time passed since January 1, 1970).</value>
        [DataMember(Name = "sent", EmitDefaultValue = false)]
        public int Sent { get; set; }

        /// <summary>
        /// A UTC timestamp at which the Integration provider delivered the message. This is stored as a millisecond representation of the Unix epoch (the time passed since January 1, 1970).
        /// </summary>
        /// <value>A UTC timestamp at which the Integration provider delivered the message. This is stored as a millisecond representation of the Unix epoch (the time passed since January 1, 1970).</value>
        [DataMember(Name = "delivered", EmitDefaultValue = false)]
        public int Delivered { get; set; }

        /// <summary>
        /// A UTC timestamp at which the recipient opened a message for the first time. This is stored as a millisecond representation of the Unix epoch (the time passed since January 1, 1970).
        /// </summary>
        /// <value>A UTC timestamp at which the recipient opened a message for the first time. This is stored as a millisecond representation of the Unix epoch (the time passed since January 1, 1970).</value>
        [DataMember(Name = "opened", EmitDefaultValue = false)]
        public int Opened { get; set; }

        /// <summary>
        /// A UTC timestamp at which the recipient clicked on a tracked link for the first time. This is stored as a millisecond representation of the Unix epoch (the time passed since January 1, 1970).
        /// </summary>
        /// <value>A UTC timestamp at which the recipient clicked on a tracked link for the first time. This is stored as a millisecond representation of the Unix epoch (the time passed since January 1, 1970).</value>
        [DataMember(Name = "clicked", EmitDefaultValue = false)]
        public int Clicked { get; set; }

        /// <summary>
        /// A unique identifier associated with the recipient of the delivered message.
        /// </summary>
        /// <value>A unique identifier associated with the recipient of the delivered message.</value>
        [DataMember(Name = "recipient", EmitDefaultValue = false)]
        public string Recipient { get; set; }

        /// <summary>
        /// A unique identifier associated with the event of the delivered message.
        /// </summary>
        /// <value>A unique identifier associated with the event of the delivered message.</value>
        [DataMember(Name = "event", EmitDefaultValue = false)]
        public string Event { get; set; }

        /// <summary>
        /// A unique identifier associated with the notification of the delivered message.
        /// </summary>
        /// <value>A unique identifier associated with the notification of the delivered message.</value>
        [DataMember(Name = "notification", EmitDefaultValue = false)]
        public string Notification { get; set; }

        /// <summary>
        /// A message describing the error that occurred.
        /// </summary>
        /// <value>A message describing the error that occurred.</value>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public string Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PartialMessage {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Enqueued: ").Append(Enqueued).Append("\n");
            sb.Append("  Sent: ").Append(Sent).Append("\n");
            sb.Append("  Delivered: ").Append(Delivered).Append("\n");
            sb.Append("  Opened: ").Append(Opened).Append("\n");
            sb.Append("  Clicked: ").Append(Clicked).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  Notification: ").Append(Notification).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PartialMessage);
        }

        /// <summary>
        /// Returns true if PartialMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of PartialMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PartialMessage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Enqueued == input.Enqueued ||
                    this.Enqueued.Equals(input.Enqueued)
                ) && 
                (
                    this.Sent == input.Sent ||
                    this.Sent.Equals(input.Sent)
                ) && 
                (
                    this.Delivered == input.Delivered ||
                    this.Delivered.Equals(input.Delivered)
                ) && 
                (
                    this.Opened == input.Opened ||
                    this.Opened.Equals(input.Opened)
                ) && 
                (
                    this.Clicked == input.Clicked ||
                    this.Clicked.Equals(input.Clicked)
                ) && 
                (
                    this.Recipient == input.Recipient ||
                    (this.Recipient != null &&
                    this.Recipient.Equals(input.Recipient))
                ) && 
                (
                    this.Event == input.Event ||
                    (this.Event != null &&
                    this.Event.Equals(input.Event))
                ) && 
                (
                    this.Notification == input.Notification ||
                    (this.Notification != null &&
                    this.Notification.Equals(input.Notification))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.Reason == input.Reason ||
                    this.Reason.Equals(input.Reason)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.Enqueued.GetHashCode();
                hashCode = hashCode * 59 + this.Sent.GetHashCode();
                hashCode = hashCode * 59 + this.Delivered.GetHashCode();
                hashCode = hashCode * 59 + this.Opened.GetHashCode();
                hashCode = hashCode * 59 + this.Clicked.GetHashCode();
                if (this.Recipient != null)
                    hashCode = hashCode * 59 + this.Recipient.GetHashCode();
                if (this.Event != null)
                    hashCode = hashCode * 59 + this.Event.GetHashCode();
                if (this.Notification != null)
                    hashCode = hashCode * 59 + this.Notification.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                hashCode = hashCode * 59 + this.Reason.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
