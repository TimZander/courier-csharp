/*
 * Courier API Reference
 *
 * The Courier REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@courier.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Courier.Client.OpenAPIDateConverter;

namespace Com.Courier.Model
{
    /// <summary>
    /// Send
    /// </summary>
    [DataContract(Name = "Send")]
    public partial class Send : IEquatable<Send>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Send" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Send() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Send" /> class.
        /// </summary>
        /// <param name="_event">A unique identifier that can be mapped to an individual Notification. This could be the \&quot;Notification ID” on Notification detail pages (see the [Notifications page](https://app.courier.com/designer/notifications) in the Courier app) or a custom string mapped to the event in [settings](https://app.courier.com/settings/events). (required) (default to &quot;EXAMPLE_NOTIFICATION&quot;).</param>
        /// <param name="recipient">A unique identifier associated with the recipient of the delivered message. (required) (default to &quot;8ec8c99a-c5f7-455b-9f60-8222b8a27056&quot;).</param>
        /// <param name="brand">A unique identifier that represents the brand that should be used for rendering the notification. (default to &quot;W50NC77P524K14M5300PGPEK4JMJ&quot;).</param>
        /// <param name="data">An object that includes any data you want to pass to a message template. The data will populate the corresponding template variables..</param>
        /// <param name="_override">An object that is merged into the request sent by Courier to the provider to override properties or to gain access to features in the provider API that are not natively supported by Courier..</param>
        /// <param name="preferences">An object that includes any preferences for the recipient..</param>
        /// <param name="profile">An object that includes any key-value pairs required by your chosen Integrations (see our [Provider Documentation](https://docs.courier.com/docs) for the requirements for each Integration.) If profile information is included in the request and that information already exists in the profile for the recipientId, that information will be merged..</param>
        public Send(string _event = "EXAMPLE_NOTIFICATION", string recipient = "8ec8c99a-c5f7-455b-9f60-8222b8a27056", string brand = "W50NC77P524K14M5300PGPEK4JMJ", string data = default(string), string _override = default(string), string preferences = default(string), string profile = default(string))
        {
            // to ensure "_event" is required (not null)
            if (_event == null) {
                throw new ArgumentNullException("_event is a required property for Send and cannot be null");
            }
            this.Event = _event;
            // to ensure "recipient" is required (not null)
            if (recipient == null) {
                throw new ArgumentNullException("recipient is a required property for Send and cannot be null");
            }
            this.Recipient = recipient;
            // use default value if no "brand" provided
            this.Brand = brand ?? "W50NC77P524K14M5300PGPEK4JMJ";
            this.Data = data;
            this.Override = _override;
            this.Preferences = preferences;
            this.Profile = profile;
        }

        /// <summary>
        /// A unique identifier that can be mapped to an individual Notification. This could be the \&quot;Notification ID” on Notification detail pages (see the [Notifications page](https://app.courier.com/designer/notifications) in the Courier app) or a custom string mapped to the event in [settings](https://app.courier.com/settings/events).
        /// </summary>
        /// <value>A unique identifier that can be mapped to an individual Notification. This could be the \&quot;Notification ID” on Notification detail pages (see the [Notifications page](https://app.courier.com/designer/notifications) in the Courier app) or a custom string mapped to the event in [settings](https://app.courier.com/settings/events).</value>
        [DataMember(Name = "event", IsRequired = true, EmitDefaultValue = false)]
        public string Event { get; set; }

        /// <summary>
        /// A unique identifier associated with the recipient of the delivered message.
        /// </summary>
        /// <value>A unique identifier associated with the recipient of the delivered message.</value>
        [DataMember(Name = "recipient", IsRequired = true, EmitDefaultValue = false)]
        public string Recipient { get; set; }

        /// <summary>
        /// A unique identifier that represents the brand that should be used for rendering the notification.
        /// </summary>
        /// <value>A unique identifier that represents the brand that should be used for rendering the notification.</value>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        public string Brand { get; set; }

        /// <summary>
        /// An object that includes any data you want to pass to a message template. The data will populate the corresponding template variables.
        /// </summary>
        /// <value>An object that includes any data you want to pass to a message template. The data will populate the corresponding template variables.</value>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public string Data { get; set; }

        /// <summary>
        /// An object that is merged into the request sent by Courier to the provider to override properties or to gain access to features in the provider API that are not natively supported by Courier.
        /// </summary>
        /// <value>An object that is merged into the request sent by Courier to the provider to override properties or to gain access to features in the provider API that are not natively supported by Courier.</value>
        [DataMember(Name = "override", EmitDefaultValue = false)]
        public string Override { get; set; }

        /// <summary>
        /// An object that includes any preferences for the recipient.
        /// </summary>
        /// <value>An object that includes any preferences for the recipient.</value>
        [DataMember(Name = "preferences", EmitDefaultValue = false)]
        public string Preferences { get; set; }

        /// <summary>
        /// An object that includes any key-value pairs required by your chosen Integrations (see our [Provider Documentation](https://docs.courier.com/docs) for the requirements for each Integration.) If profile information is included in the request and that information already exists in the profile for the recipientId, that information will be merged.
        /// </summary>
        /// <value>An object that includes any key-value pairs required by your chosen Integrations (see our [Provider Documentation](https://docs.courier.com/docs) for the requirements for each Integration.) If profile information is included in the request and that information already exists in the profile for the recipientId, that information will be merged.</value>
        [DataMember(Name = "profile", EmitDefaultValue = false)]
        public string Profile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Send {\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Override: ").Append(Override).Append("\n");
            sb.Append("  Preferences: ").Append(Preferences).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Send);
        }

        /// <summary>
        /// Returns true if Send instances are equal
        /// </summary>
        /// <param name="input">Instance of Send to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Send input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Event == input.Event ||
                    (this.Event != null &&
                    this.Event.Equals(input.Event))
                ) && 
                (
                    this.Recipient == input.Recipient ||
                    (this.Recipient != null &&
                    this.Recipient.Equals(input.Recipient))
                ) && 
                (
                    this.Brand == input.Brand ||
                    (this.Brand != null &&
                    this.Brand.Equals(input.Brand))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.Override == input.Override ||
                    (this.Override != null &&
                    this.Override.Equals(input.Override))
                ) && 
                (
                    this.Preferences == input.Preferences ||
                    (this.Preferences != null &&
                    this.Preferences.Equals(input.Preferences))
                ) && 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Event != null)
                    hashCode = hashCode * 59 + this.Event.GetHashCode();
                if (this.Recipient != null)
                    hashCode = hashCode * 59 + this.Recipient.GetHashCode();
                if (this.Brand != null)
                    hashCode = hashCode * 59 + this.Brand.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.Override != null)
                    hashCode = hashCode * 59 + this.Override.GetHashCode();
                if (this.Preferences != null)
                    hashCode = hashCode * 59 + this.Preferences.GetHashCode();
                if (this.Profile != null)
                    hashCode = hashCode * 59 + this.Profile.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
