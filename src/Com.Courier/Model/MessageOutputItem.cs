/*
 * Courier API Reference
 *
 * The Courier REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@courier.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Courier.Client.OpenAPIDateConverter;

namespace Com.Courier.Model
{
    /// <summary>
    /// MessageOutputItem
    /// </summary>
    [DataContract(Name = "MessageOutputItem")]
    public partial class MessageOutputItem : IEquatable<MessageOutputItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageOutputItem" /> class.
        /// </summary>
        /// <param name="channel">The channel used for rendering the message.</param>
        /// <param name="channelId">The ID of channel used for rendering the message.</param>
        /// <param name="content">content.</param>
        public MessageOutputItem(string channel = default(string), string channelId = default(string), MessageOutputItemContent content = default(MessageOutputItemContent))
        {
            this.Channel = channel;
            this.ChannelId = channelId;
            this.Content = content;
        }

        /// <summary>
        /// The channel used for rendering the message
        /// </summary>
        /// <value>The channel used for rendering the message</value>
        [DataMember(Name = "channel", EmitDefaultValue = false)]
        public string Channel { get; set; }

        /// <summary>
        /// The ID of channel used for rendering the message
        /// </summary>
        /// <value>The ID of channel used for rendering the message</value>
        [DataMember(Name = "channel_id", EmitDefaultValue = false)]
        public string ChannelId { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public MessageOutputItemContent Content { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageOutputItem {\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageOutputItem);
        }

        /// <summary>
        /// Returns true if MessageOutputItem instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageOutputItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageOutputItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                ) && 
                (
                    this.ChannelId == input.ChannelId ||
                    (this.ChannelId != null &&
                    this.ChannelId.Equals(input.ChannelId))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Channel != null)
                    hashCode = hashCode * 59 + this.Channel.GetHashCode();
                if (this.ChannelId != null)
                    hashCode = hashCode * 59 + this.ChannelId.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
